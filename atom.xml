<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Baymax55&#39;s Blog</title>
  
  <subtitle>baymax55</subtitle>
  <link href="https://baymax55.github.io/atom.xml" rel="self"/>
  
  <link href="https://baymax55.github.io/"/>
  <updated>2022-07-05T00:24:31.449Z</updated>
  <id>https://baymax55.github.io/</id>
  
  <author>
    <name>baymax55</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>活着</title>
    <link href="https://baymax55.github.io/2022/07/05/book/%E6%B4%BB%E7%9D%80/"/>
    <id>https://baymax55.github.io/2022/07/05/book/%E6%B4%BB%E7%9D%80/</id>
    <published>2022-07-05T00:24:31.449Z</published>
    <updated>2022-07-05T00:24:31.449Z</updated>
    
    <content type="html"><![CDATA[<p><img src="%E6%B4%BB%E7%9D%80.png"></p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>余华</p><h2 id="原文摘录"><a href="#原文摘录" class="headerlink" title="原文摘录"></a>原文摘录</h2><ul><li><p><strong>作为一个词语，“活着”在我们中国的语言中充满了力量，它的力量不是来自于喊叫，也不是来自于进攻，而是忍受，去忍受生命赋予我们的责任，去忍受现实给予我们的幸福和苦难、无聊和平庸。</strong></p></li><li><p><strong>做人不能忘记四条，话不要说错，床不要睡错，门槛不要踏错，口袋不要摸错。</strong></p></li><li><p><strong>做人还是平常点好，争这个争那个，争来争去赔了自己的命。</strong></p></li></ul><h2 id="短评"><a href="#短评" class="headerlink" title="短评"></a>短评</h2><p><strong>一个长寿的悲剧，生命本就是孤孤单单的来，最后只落得和一头牛为友，让它象征自己生命中走过的人们。这位曾经的富家子弟现在的垂垂老者，一生之中谨守本份，随波逐流，就像每个平凡的中国人，皆是有起有落的生活。</strong></p><h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ul><li><a href="https://book.douban.com/subject/1082154/">豆瓣读书</a></li></ul>]]></content>
    
    
    <summary type="html">做人还是平常点好，争这个争那个，争来争去赔了自己的命。</summary>
    
    
    
    <category term="book" scheme="https://baymax55.github.io/categories/book/"/>
    
    
    <category term="文学" scheme="https://baymax55.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
    <category term="余华" scheme="https://baymax55.github.io/tags/%E4%BD%99%E5%8D%8E/"/>
    
  </entry>
  
  <entry>
    <title>Network</title>
    <link href="https://baymax55.github.io/2022/07/01/network/network/"/>
    <id>https://baymax55.github.io/2022/07/01/network/network/</id>
    <published>2022-07-01T08:19:54.495Z</published>
    <updated>2022-07-01T08:31:12.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ul><li><a href="https://github.com/bregman-arie/devops-exercises#Network">Network</a></li></ul>]]></content>
    
    
    <summary type="html">Network</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="network" scheme="https://baymax55.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Interfaces</title>
    <link href="https://baymax55.github.io/2022/07/01/go/Interfaces/"/>
    <id>https://baymax55.github.io/2022/07/01/go/Interfaces/</id>
    <published>2022-07-01T01:24:26.587Z</published>
    <updated>2022-07-01T02:23:32.220Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.png"></p><h2 id="Interfaces-are-named-collections-of-method-signatures"><a href="#Interfaces-are-named-collections-of-method-signatures" class="headerlink" title="Interfaces are named collections of method signatures."></a>Interfaces are named collections of method signatures.</h2><h2 id="The-Go-Playground"><a href="#The-Go-Playground" class="headerlink" title="The Go Playground"></a><a href="https://go.dev/play/p/XJASG4MxBQr">The Go Playground</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// _Interfaces_ are named collections of method signatures.</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-comment">// Here&#x27;s a basic interface for geometric shapes.</span><br><span class="hljs-keyword">type</span> geometry <span class="hljs-keyword">interface</span> &#123;<br>area() <span class="hljs-type">float64</span><br>perim() <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// For our example we&#x27;ll implement this interface on</span><br><span class="hljs-comment">// `rect` and `circle` types.</span><br><span class="hljs-keyword">type</span> rect <span class="hljs-keyword">struct</span> &#123;<br>width, height <span class="hljs-type">float64</span><br>&#125;<br><span class="hljs-keyword">type</span> circle <span class="hljs-keyword">struct</span> &#123;<br>radius <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// To implement an interface in Go, we just need to</span><br><span class="hljs-comment">// implement all the methods in the interface. Here we</span><br><span class="hljs-comment">// implement `geometry` on `rect`s.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r rect)</span></span> area() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> r.width * r.height<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r rect)</span></span> perim() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*r.width + <span class="hljs-number">2</span>*r.height<br>&#125;<br><br><span class="hljs-comment">// The implementation for `circle`s.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c circle)</span></span> area() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Pi * c.radius * c.radius<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c circle)</span></span> perim() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * math.Pi * c.radius<br>&#125;<br><br><span class="hljs-comment">// If a variable has an interface type, then we can call</span><br><span class="hljs-comment">// methods that are in the named interface. Here&#x27;s a</span><br><span class="hljs-comment">// generic `measure` function taking advantage of this</span><br><span class="hljs-comment">// to work on any `geometry`.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">measure</span><span class="hljs-params">(g geometry)</span></span> &#123;<br>fmt.Println(g)<br>fmt.Println(g.area())<br>fmt.Println(g.perim())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := rect&#123;width: <span class="hljs-number">3</span>, height: <span class="hljs-number">4</span>&#125;<br>c := circle&#123;radius: <span class="hljs-number">5</span>&#125;<br><br><span class="hljs-comment">// The `circle` and `rect` struct types both</span><br><span class="hljs-comment">// implement the `geometry` interface so we can use</span><br><span class="hljs-comment">// instances of</span><br><span class="hljs-comment">// these structs as arguments to `measure`.</span><br>measure(r)<br>measure(c)<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://gobyexample.com/interfaces">Go by Example: Interfaces</a></li></ul>]]></content>
    
    
    <summary type="html">Interfaces are named collections of method signatures.</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="GO" scheme="https://baymax55.github.io/tags/GO/"/>
    
    <category term="Interfaces" scheme="https://baymax55.github.io/tags/Interfaces/"/>
    
  </entry>
  
  <entry>
    <title>Structs</title>
    <link href="https://baymax55.github.io/2022/06/30/go/Structs/"/>
    <id>https://baymax55.github.io/2022/06/30/go/Structs/</id>
    <published>2022-06-30T01:59:08.890Z</published>
    <updated>2022-07-01T02:23:38.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go’s-structs-are-typed-collections-of-fields-They’re-useful-for-grouping-data-together-to-form-records"><a href="#Go’s-structs-are-typed-collections-of-fields-They’re-useful-for-grouping-data-together-to-form-records" class="headerlink" title="Go’s structs are typed collections of fields. They’re useful for grouping data together to form records."></a>Go’s structs are typed collections of fields. They’re useful for grouping data together to form records.</h2><h2 id="The-Go-Playground"><a href="#The-Go-Playground" class="headerlink" title="The Go Playground"></a><a href="https://go.dev/play/p/n7jt1x3iw4Z">The Go Playground</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// This `person` struct type has `name` and `age` fields.</span><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">// `newPerson` constructs a new person struct with the given name.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newPerson</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> *person &#123;<br><span class="hljs-comment">// You can safely return a pointer to local variable</span><br><span class="hljs-comment">// as a local variable will survive the scope of the function.</span><br>p := person&#123;name: name&#125;<br>p.age = <span class="hljs-number">42</span><br><span class="hljs-keyword">return</span> &amp;p<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// This syntax creates a new struct.</span><br>fmt.Println(person&#123;<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">20</span>&#125;)<br><br><span class="hljs-comment">// You can name the fields when initializing a struct.</span><br>fmt.Println(person&#123;name: <span class="hljs-string">&quot;Alice&quot;</span>, age: <span class="hljs-number">30</span>&#125;)<br><br><span class="hljs-comment">// Omitted fields will be zero-valued.</span><br>fmt.Println(person&#123;name: <span class="hljs-string">&quot;Fred&quot;</span>&#125;)<br><br><span class="hljs-comment">// An `&amp;` prefix yields a pointer to the struct.</span><br>fmt.Println(&amp;person&#123;name: <span class="hljs-string">&quot;Ann&quot;</span>, age: <span class="hljs-number">40</span>&#125;)<br><br><span class="hljs-comment">// It&#x27;s idiomatic to encapsulate new struct creation in constructor functions</span><br>fmt.Println(newPerson(<span class="hljs-string">&quot;Jon&quot;</span>))<br><br><span class="hljs-comment">// Access struct fields with a dot.</span><br>s := person&#123;name: <span class="hljs-string">&quot;Sean&quot;</span>, age: <span class="hljs-number">50</span>&#125;<br>fmt.Println(s.name)<br><br><span class="hljs-comment">// You can also use dots with struct pointers - the</span><br><span class="hljs-comment">// pointers are automatically dereferenced.</span><br>sp := &amp;s<br>fmt.Println(sp.age)<br><br><span class="hljs-comment">// Structs are mutable.</span><br>sp.age = <span class="hljs-number">51</span><br>fmt.Println(sp.age)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://gobyexample.com/structs">Go by Example: Structs</a></li></ul>]]></content>
    
    
    <summary type="html">Go’s structs are typed collections of fields. They’re useful for grouping data together to form records.</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="GO" scheme="https://baymax55.github.io/tags/GO/"/>
    
    <category term="Structs" scheme="https://baymax55.github.io/tags/Structs/"/>
    
  </entry>
  
  <entry>
    <title>常用的创建对象方式及存在问题</title>
    <link href="https://baymax55.github.io/2022/06/29/java/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://baymax55.github.io/2022/06/29/java/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98/</id>
    <published>2022-06-29T01:40:25.798Z</published>
    <updated>2022-06-29T02:20:18.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用构造方法"><a href="#使用构造方法" class="headerlink" title="使用构造方法"></a>使用构造方法</h2><p>成员变量很多的时候，构造方法就没方便了.<br>举例:NutritionFacts是食品包装外面显示的营养成分标签，这里面有的营养成分是必须的：每一份的含量、每一罐的含量，其他的可选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NutritionFacts</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servingSize;  <span class="hljs-comment">// (mL)            required</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servings;     <span class="hljs-comment">// (per container) required</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> calories;     <span class="hljs-comment">//                 optional</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> fat;          <span class="hljs-comment">// (g)             optional</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> sodium;       <span class="hljs-comment">// (mg)            optional</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> carbohydrate; <span class="hljs-comment">// (g)             optional</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NutritionFacts</span><span class="hljs-params">(<span class="hljs-type">int</span> servingSize, <span class="hljs-type">int</span> servings)</span> &#123;<br>        <span class="hljs-built_in">this</span>(servingSize, servings, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NutritionFacts</span><span class="hljs-params">(<span class="hljs-type">int</span> servingSize, <span class="hljs-type">int</span> servings,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> calories)</span> &#123;<br>        <span class="hljs-built_in">this</span>(servingSize, servings, calories, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NutritionFacts</span><span class="hljs-params">(<span class="hljs-type">int</span> servingSize, <span class="hljs-type">int</span> servings,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> calories, <span class="hljs-type">int</span> fat)</span> &#123;<br>        <span class="hljs-built_in">this</span>(servingSize, servings, calories, fat, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NutritionFacts</span><span class="hljs-params">(<span class="hljs-type">int</span> servingSize, <span class="hljs-type">int</span> servings,</span><br><span class="hljs-params">            <span class="hljs-type">int</span> calories, <span class="hljs-type">int</span> fat, <span class="hljs-type">int</span> sodium)</span> &#123;<br>        <span class="hljs-built_in">this</span>(servingSize, servings, calories, fat, sodium, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NutritionFacts</span><span class="hljs-params">(<span class="hljs-type">int</span> servingSize, <span class="hljs-type">int</span> servings,</span><br><span class="hljs-params">           <span class="hljs-type">int</span> calories, <span class="hljs-type">int</span> fat, <span class="hljs-type">int</span> sodium, <span class="hljs-type">int</span> carbohydrate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.servingSize  = servingSize;<br>        <span class="hljs-built_in">this</span>.servings     = servings;<br>        <span class="hljs-built_in">this</span>.calories     = calories;<br>        <span class="hljs-built_in">this</span>.fat          = fat;<br>        <span class="hljs-built_in">this</span>.sodium       = sodium;<br>        <span class="hljs-built_in">this</span>.carbohydrate = carbohydrate;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>从上面的代码可见，为了尽量满足用户需要，NutritionFacts提供了多个构造方法给用户使用,以后要是加字段就麻烦了</p><p>缓解上述问题的一种方法是使用JavaBeans模式，用无参构造方法，然后按照调用setXXX设置每个所需字段，示例如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NutritionFacts</span> <span class="hljs-variable">cocaCola</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NutritionFacts</span>();<br>cocaCola.setServingSize(<span class="hljs-number">240</span>);<br>cocaCola.setServings(<span class="hljs-number">8</span>);<br>cocaCola.setCalories(<span class="hljs-number">100</span>);<br>cocaCola.setSodium(<span class="hljs-number">35</span>);<br>cocaCola.setCarbohydrate(<span class="hljs-number">27</span>);<br><br></code></pre></td></tr></table></figure><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><ol><li>首先，直观的看，这种做法违背了不可变对象的定义，创建出对象后，又用setXXX方法改变了成员变量</li><li>《Effective Java》的原话是在构造过程中JavaBean可能处于不一致的中的状态</li></ol><h2 id="使用静态工厂方法"><a href="#使用静态工厂方法" class="headerlink" title="使用静态工厂方法"></a>使用静态工厂方法</h2><p>相比静态工厂方法，构造方法存在以下五个典型问题</p><ol><li>随着入参的不同，构造方法可以有多个，如下所示，然而都是同名的，这会给用户造成困惑，此刻用静态工厂方法，可以自由设置方法名（例如createWithName或者createWithAge），让用户更方便的选择合适的方法</li><li>使用构造方法意味着创建对象，而有时候我们只想使用，并不在乎对象本身是否是新建的</li><li>以动物类Animal.class为例，Animal类的构造方法创建的对象Animal的实例，而静态工厂方法的返回值声明虽然是Animal，但实际返回的实例可以是Animal的子类，例如Dog</li><li>静态工厂方法内部可以有灵活的逻辑来决定返回那种子类的实例</li><li>静态工厂方法还有一个优势：方法返回对象所属的类，在编写此静态方法时可以不存在，这句话有点晦涩，可以回想一下JDBC的获取connection的API，在编写此API的时候，并不需要知道MySQL的driver实现</li></ol><h3 id="存在问题-1"><a href="#存在问题-1" class="headerlink" title="存在问题"></a>存在问题</h3><ol><li>当您开发一个类时，如果决定对外提供静态工厂方法，那么将构造方法设为私有，就可以让用户只能选择静态工厂方法了，代码如下所示，然而，这样的Student类就无法被继承<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title function_">newInstance</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(name);<br><br>        <span class="hljs-keyword">return</span> student;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>一个类的代码中，可能已有一些静态方法，再加入静态工厂方法，一堆静态方法混杂在一起，用户从中找出静态工厂方法怕是不容易</li></ol><h2 id="使用builder"><a href="#使用builder" class="headerlink" title="使用builder"></a>使用builder</h2><p>builder pattern，《Effective Java》中文版译作建造者模式，用builder对象来创建真正的对象实例，前面提到的构造方法和静态工厂的不足，在builder pattern这里都得到了改善</p><p>来看代码吧，以刚才的NutritionFacts为例，使用builder pattern后的代码如下，新增一个静态成员类Builder，可以设置Builder的每个成员变量，最后调用其build方法的时候，才真正创建NutritionFacts对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NutritionFacts</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servingSize;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servings;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> calories;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> fat;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> sodium;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> carbohydrate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>        <span class="hljs-comment">// Required parameters</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servingSize;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> servings;<br><br>        <span class="hljs-comment">// Optional parameters - initialized to default values</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">calories</span>      <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">fat</span>           <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">carbohydrate</span>  <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sodium</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(<span class="hljs-type">int</span> servingSize, <span class="hljs-type">int</span> servings)</span> &#123;<br>            <span class="hljs-built_in">this</span>.servingSize = servingSize;<br>            <span class="hljs-built_in">this</span>.servings    = servings;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">calories</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span><br>            &#123; calories = val;      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>; &#125;<br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">fat</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span><br>            &#123; fat = val;           <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>; &#125;<br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">carbohydrate</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span><br>            &#123; carbohydrate = val;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>; &#125;<br>        <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">sodium</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span><br>            &#123; sodium = val;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>; &#125;<br><br>        <span class="hljs-keyword">public</span> NutritionFacts <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NutritionFacts</span>(<span class="hljs-built_in">this</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">NutritionFacts</span><span class="hljs-params">(Builder builder)</span> &#123;<br>        servingSize  = builder.servingSize;<br>        servings     = builder.servings;<br>        calories     = builder.calories;<br>        fat          = builder.fat;<br>        sodium       = builder.sodium;<br>        carbohydrate = builder.carbohydrate;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以一个使用者的视角来看如何创建NutritionFacts对象，如下所示，流畅的写法，那些字段被设置以及具体的值都一目了然，最终build方法才会创建NutritionFacts对象，而且这是个不可变对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">NutritionFacts</span> <span class="hljs-variable">cocaCola</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NutritionFacts</span>.Builder(<span class="hljs-number">240</span>, <span class="hljs-number">8</span>)<br>                              .calories(<span class="hljs-number">100</span>)<br>                              .sodium(<span class="hljs-number">35</span>)<br>                              .carbohydrate(<span class="hljs-number">27</span>)<br>                              .build();<br><br></code></pre></td></tr></table></figure><h3 id="存在问题-2"><a href="#存在问题-2" class="headerlink" title="存在问题"></a>存在问题</h3><ol><li>即便能解决构造方法和静态工厂自身的一些问题，builder pattern也不是万能的，缺点很明显：创建对象之前，先要创建builder对象，这在一些性能要求高、资源限制苛刻的场景中就不适合了</li><li>另外builder pattern适合的场景是成员变量多的时候，而这个所谓的多究竟如何理解呢？这可能是个小马过河的问题吧：见惯了几十个成员变量的类，再去看十几个成员变量的类，可能会有种很清爽的感觉，呃，扯远了，其实《Effective Java》的说法是四个或者更多个参数，就适合用builder apttern了</li></ol><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://xinchen.blog.csdn.net/article/details/125324863">java与es8实战之一：以builder pattern开篇</a></li></ul>]]></content>
    
    
    <summary type="html">用构造方法创建对象有什么问题,用静态方法创建对象有什么问题,用builder创建对象有什么问题</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="java" scheme="https://baymax55.github.io/tags/java/"/>
    
    <category term="对象" scheme="https://baymax55.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://baymax55.github.io/2022/06/28/design-patterns/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://baymax55.github.io/2022/06/28/design-patterns/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-28T06:37:19.560Z</published>
    <updated>2022-06-28T07:54:33.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>提供另一个对象的代理或占位符来控制对它的访问</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h4 id="现实世界举例"><a href="#现实世界举例" class="headerlink" title="现实世界举例"></a>现实世界举例</h4><p>想象一下，有一座塔，当地的巫师去那里学习咒语。这个象牙塔只能通过一个代理访问，这个代理确保只有前三个巫师可以进入。这里的代理代表塔的功能并向其添加访问控制。</p><h4 id="大白话"><a href="#大白话" class="headerlink" title="大白话"></a>大白话</h4><p>使用代理模式，一个类代表另一个类的功能。</p><h4 id="维基百科解释"><a href="#维基百科解释" class="headerlink" title="维基百科解释"></a>维基百科解释</h4><p>代理，在其最一般的形式中，是作为其他事物的界面功能的类。代理是客户机调用的包装器或代理对象，用于在幕后访问真正的服务对象。<br>使用代理可以简单地转发到实际对象，也可以提供额外的逻辑。在代理中可以提供额外的功能，例如在对实际对象的操作是资源密集型时进行缓存，或者在调用对实际对象的操作之前检查先决条件。</p><h3 id="编程示例"><a href="#编程示例" class="headerlink" title="编程示例"></a>编程示例</h3><p>以我们上面的巫师塔为例。首先，我们有WizardTower接口和IvoryTower类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WizardTower</span> &#123;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">enter</span><span class="hljs-params">(Wizard wizard)</span>;<br>&#125;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IvoryTower</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WizardTower</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enter</span><span class="hljs-params">(Wizard wizard)</span> &#123;<br>    LOGGER.info(<span class="hljs-string">&quot;&#123;&#125; enters the tower.&quot;</span>, wizard);<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后是一个简单的Wizard类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Wizard</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Wizard</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后我们有了WizardTowerProxy来为WizardTower添加访问控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WizardTowerProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WizardTower</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NUM_WIZARDS_ALLOWED</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numWizards;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WizardTower tower;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">WizardTowerProxy</span><span class="hljs-params">(WizardTower tower)</span> &#123;<br>    <span class="hljs-built_in">this</span>.tower = tower;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enter</span><span class="hljs-params">(Wizard wizard)</span> &#123;<br>    <span class="hljs-keyword">if</span> (numWizards &lt; NUM_WIZARDS_ALLOWED) &#123;<br>      tower.enter(wizard);<br>      numWizards++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      LOGGER.info(<span class="hljs-string">&quot;&#123;&#125; is not allowed to enter!&quot;</span>, wizard);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是塔进入的场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WizardTowerProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IvoryTower</span>());<br>proxy.enter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Wizard</span>(<span class="hljs-string">&quot;Red wizard&quot;</span>));<br>proxy.enter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Wizard</span>(<span class="hljs-string">&quot;White wizard&quot;</span>));<br>proxy.enter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Wizard</span>(<span class="hljs-string">&quot;Black wizard&quot;</span>));<br>proxy.enter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Wizard</span>(<span class="hljs-string">&quot;Green wizard&quot;</span>));<br>proxy.enter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Wizard</span>(<span class="hljs-string">&quot;Brown wizard&quot;</span>));<br><br></code></pre></td></tr></table></figure><p>程序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>Red wizard enters the tower.<br>White wizard enters the tower.<br>Black wizard enters the tower.<br>Green wizard is not allowed to enter!<br>Brown wizard is not allowed to enter!<br></code></pre></td></tr></table></figure><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="1.png"></p><h2 id="适应范围"><a href="#适应范围" class="headerlink" title="适应范围"></a>适应范围</h2><p>当需要比简单指针更通用或更复杂的对象引用时，代理是适用的。以下是代理模式适用的几种常见情况。</p><ul><li>远程代理为不同地址空间中的对象提供本地代表。</li><li>虚拟代理按需创建昂贵的对象。</li><li>保护代理控制对原始对象的访问。当对象应具有不同的访问权限时，保护代理很有用。</li></ul><p>通常，代理模式用于</p><ul><li>控制对另一个对象的访问</li><li>惰性初始化</li><li>实现日志记录</li><li>促进网络连接</li><li>计数对对象的引用</li></ul><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://java-design-patterns.com/patterns/proxy/">Proxy</a></li></ul>]]></content>
    
    
    <summary type="html">翻译代理模式</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="设计模式" scheme="https://baymax55.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理" scheme="https://baymax55.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="proxy" scheme="https://baymax55.github.io/tags/proxy/"/>
    
    <category term="译文" scheme="https://baymax55.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Raft 动画演示</title>
    <link href="https://baymax55.github.io/2022/06/28/Raft%20%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/"/>
    <id>https://baymax55.github.io/2022/06/28/Raft%20%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/</id>
    <published>2022-06-28T02:19:45.872Z</published>
    <updated>2022-06-28T02:31:37.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="raft算法"><a href="#raft算法" class="headerlink" title="raft算法"></a>raft算法</h3><p>Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能，但是它的算法结构和 Paxos 不同，使得 Raft 算法更加容易理解并且更容易构建实际的系统。<br>为了提升可理解性，Raft 将一致性算法分解成了几个关键模块，如领导人选举、日志复制。这个演示动画就是为了方便理解这几个关键模块而设计的。</p><h3 id="动画演示地址"><a href="#动画演示地址" class="headerlink" title="动画演示地址"></a>动画演示地址</h3><ul><li><a href="http://www.kailing.pub/raft/index.html#home">中文</a></li><li><a href="http://thesecretlivesofdata.com/raft/">英文</a></li></ul>]]></content>
    
    
    <summary type="html">Raft 动画演示</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="Raft" scheme="https://baymax55.github.io/tags/Raft/"/>
    
    <category term="算法" scheme="https://baymax55.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>dubbo自定义路由设置</title>
    <link href="https://baymax55.github.io/2022/06/27/dubbo/router/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/"/>
    <id>https://baymax55.github.io/2022/06/27/dubbo/router/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-06-27T08:08:28.975Z</published>
    <updated>2022-06-27T08:43:50.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>开发人员进行本地开发时,经常会出现接口调到k8s容器内的服务上,我们本地和k8s共用一个nacos服务.</p><p>根据调研,打算使用dubbo的自定义路由实现.本地服务调接口时,使用路由过滤掉k8s内部的provider地址,从而实现,本地consumer能够一直本地provider服务.</p><p>由于过滤了k8s内部实例的ip,因此需要,将此路由只能在本地生效,在k8s环境内失效,通过spring.profiles实现.</p><h3 id="实现自定义路由"><a href="#实现自定义路由" class="headerlink" title="实现自定义路由"></a>实现自定义路由</h3><h4 id="继承AbstractRouter"><a href="#继承AbstractRouter" class="headerlink" title="继承AbstractRouter"></a>继承AbstractRouter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.dubbo.common.URL;<br><span class="hljs-keyword">import</span> org.apache.dubbo.rpc.Invocation;<br><span class="hljs-keyword">import</span> org.apache.dubbo.rpc.Invoker;<br><span class="hljs-keyword">import</span> org.apache.dubbo.rpc.RpcException;<br><span class="hljs-keyword">import</span> org.apache.dubbo.rpc.cluster.router.AbstractRouter;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IpRouter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRouter</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IpRouter</span><span class="hljs-params">(URL url)</span> &#123;<br>        <span class="hljs-built_in">super</span>(url);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; <span class="hljs-title function_">route</span><span class="hljs-params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException &#123;<br><br>        <span class="hljs-keyword">if</span> (!SpringContextUtil.isLocal()) &#123; <span class="hljs-comment">//仅在本地进行路由</span><br>            <span class="hljs-keyword">return</span> invokers;<br>        &#125;<br>        <br>        log.info(<span class="hljs-string">&quot; before route :&#123;&#125;,&#123;&#125;&quot;</span>, invokers.size(), invokers);<br>        <span class="hljs-keyword">if</span> (invokers.size() &lt;= <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//存在少于一个provider时不进行路由,可选</span><br>            <span class="hljs-keyword">return</span> invokers;<br>        &#125;<br><br>        <span class="hljs-comment">//存在多个provider时,过滤掉属于k8s内服务的provider,保留本地服务</span><br>        Predicate&lt;Invoker&lt;T&gt;&gt; useLocalIP = str -&gt; !str.getUrl().toServiceString().contains(<span class="hljs-string">&quot;10.0.80.9&quot;</span>);<br>        List&lt;Invoker&lt;T&gt;&gt; collect = invokers.stream().filter(useLocalIP).collect(Collectors.toList());<br><br>        log.info(<span class="hljs-string">&quot; after route:&#123;&#125;,&#123;&#125;&quot;</span>, collect.size(), collect);<br>        <span class="hljs-keyword">return</span> collect;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现RouterFactory"><a href="#实现RouterFactory" class="headerlink" title="实现RouterFactory"></a>实现RouterFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.apache.dubbo.common.URL;<br><span class="hljs-keyword">import</span> org.apache.dubbo.common.extension.Activate;<br><span class="hljs-keyword">import</span> org.apache.dubbo.rpc.cluster.Router;<br><span class="hljs-keyword">import</span> org.apache.dubbo.rpc.cluster.RouterFactory;<br><br><span class="hljs-meta">@Activate(group = &quot;consumer&quot;)</span><span class="hljs-comment">//只在consumer侧激活</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IpRouterFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RouterFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Router <span class="hljs-title function_">getRouter</span><span class="hljs-params">(URL url)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IpRouter</span>(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="加载RouterFactory"><a href="#加载RouterFactory" class="headerlink" title="加载RouterFactory"></a>加载RouterFactory</h4><p>在resources 目录下创建目录META-INF\dubbo<br>创建文件:org.apache.dubbo.rpc.cluster.RouterFactory,<br>值为:ip=com.wtt.demo.app.route.IpRouterFactory</p><h3 id="解决只在本地生效"><a href="#解决只在本地生效" class="headerlink" title="解决只在本地生效"></a>解决只在本地生效</h3><h4 id="创建SpringContextUtil工具类"><a href="#创建SpringContextUtil工具类" class="headerlink" title="创建SpringContextUtil工具类"></a>创建SpringContextUtil工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContextAware;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringContextUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] getActiveProfileList() &#123;<br>        <span class="hljs-keyword">return</span> context.getEnvironment().getActiveProfiles();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title function_">isLocal</span><span class="hljs-params">()</span> &#123;<br>        String[] activeProfileList = getActiveProfileList();<br>        Predicate&lt;String&gt; containsLocalProfile = m -&gt; m.contains(<span class="hljs-string">&quot;local&quot;</span>);<br>        <span class="hljs-keyword">return</span> Arrays.stream(activeProfileList).anyMatch(containsLocalProfile);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.context = applicationContext;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li>深入理解Apache Dubbo与实战</li><li><a href="https://zzshuo.github.io/2021/05/21/005-dubbo-tag-invoker-chain/">dubbo自定义标签路由</a></li></ul>]]></content>
    
    
    <summary type="html">扩展dubbo自定义路由</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="dubbo" scheme="https://baymax55.github.io/tags/dubbo/"/>
    
    <category term="router" scheme="https://baymax55.github.io/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>黑群晖系统安装</title>
    <link href="https://baymax55.github.io/2022/06/23/nas/%E9%BB%91%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>https://baymax55.github.io/2022/06/23/nas/%E9%BB%91%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2022-06-23T03:11:21.092Z</published>
    <updated>2022-06-23T03:54:57.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>使用u盘作为引导盘,后续要一直插着,拔掉后会无法进行系统</p><ol><li>插入u盘,打开rufus软件,待识别u盘后,选择img镜像文件成功写入u盘</li><li>将u盘插入闲置主机,启动电脑并调试bios第一启动项为U盘</li><li>待出现如下图后,在另一设备操作<br><img src="1.png"></li><li>在浏览器打开 闲置主机的ip:5000 等待响应 </li><li>按浏览器提示操作即可,中间会提示选择系统,安装.pat文件即可</li></ol><h3 id="安装注意点"><a href="#安装注意点" class="headerlink" title="安装注意点"></a>安装注意点</h3><ol><li>我这边使用u盘作为引导盘,使用ssd作为引导时会报错(Failed to format the disk. (35))</li><li>修改bios设置第一启动项为u盘启动(否则每次手动选择启动项很烦)</li><li>安装其他群晖系统时无法进入系统,我这边只能适合ds3617_6.1版本</li><li>一定要设置u盘为默认的第一启动项(即电脑开机后默认选择u盘进入),否则系统安装完,需要重启,会出现无法进行系统问题</li></ol><h3 id="其他nas系统"><a href="#其他nas系统" class="headerlink" title="其他nas系统"></a>其他nas系统</h3><ol><li>TrueNAS</li><li>Unraid</li></ol><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p>用到的工具及系统文件下载地址:<br><a href="https://pan.baidu.com/share/init?surl=EqJ8s2YedADjV9zCX_LwRQ">https://pan.baidu.com/share/init?surl=EqJ8s2YedADjV9zCX_LwRQ</a><br>提取码: ifb5</p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li><a href="https://post.smzdm.com/p/aqx07xmk/">文菌装NAS 篇五：手把手教您安装黑群晖918+ 6.2保姆级教程，这应该是装黑群晖NAS最详细的教程了，含群晖设置</a></li><li><a href="https://new.qq.com/omn/20210129/20210129A0C4S900.html">如何通过bios设置u盘启动项实现U盘启动</a></li></ul>]]></content>
    
    
    <summary type="html">搭建黑群晖</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="nas" scheme="https://baymax55.github.io/tags/nas/"/>
    
    <category term="群晖" scheme="https://baymax55.github.io/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>rabbitMQ实现延迟消息队列</title>
    <link href="https://baymax55.github.io/2022/06/22/mq/rabbitMQ%E5%AE%9E%E7%8E%B0%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>https://baymax55.github.io/2022/06/22/mq/rabbitMQ%E5%AE%9E%E7%8E%B0%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2022-06-22T01:30:59.363Z</published>
    <updated>2022-06-22T01:58:06.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="延迟消息实现的两种方式"><a href="#延迟消息实现的两种方式" class="headerlink" title="延迟消息实现的两种方式"></a>延迟消息实现的两种方式</h3><ul><li>通过Rabbitmq本身队列的特性来实现，需要使用Rabbitmq的死信交换机（Exchange）和消息的存活时间TTL</li><li>通过插件（rabbitmq-delayed-message-exchange）来实现</li></ul><h3 id="消息的TTL"><a href="#消息的TTL" class="headerlink" title="消息的TTL"></a>消息的TTL</h3><p>RabbitMQ可以针对Queue和Message设置 x-message-tt，来控制消息的生存时间，如果超时，则消息变为dead letter</p><h4 id="针对队列的过期时间"><a href="#针对队列的过期时间" class="headerlink" title="针对队列的过期时间"></a>针对队列的过期时间</h4><p>通过队列属性设置，队列中所有消息都有相同的过期时间。</p><h4 id="针对消息的过期时间"><a href="#针对消息的过期时间" class="headerlink" title="针对消息的过期时间"></a>针对消息的过期时间</h4><p>对消息进行单独设置，每条消息TTL可以不同。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果同时使用，则消息的过期时间以两者之间TTL较小的那个数值为准。消息在队列的生存时间一旦超过设置的TTL值，就成为dead letter</p><h3 id="DLX-Dead-Letter-Exchange"><a href="#DLX-Dead-Letter-Exchange" class="headerlink" title="DLX (Dead-Letter-Exchange)"></a>DLX (Dead-Letter-Exchange)</h3><p>Queue可以配置x-dead-letter-exchange 和x-dead-letter-routing-key（可选）两个参数，如果队列内出现了dead letter，则按照这两个参数重新路由</p><p>x-dead-letter-exchange: 出现dead letter之后将dead letter重新发送到指定exchange<br>x-dead-letter-routing-key:指定routing-key发送</p><h3 id="队列出现dead-letter的情况"><a href="#队列出现dead-letter的情况" class="headerlink" title="队列出现dead letter的情况"></a>队列出现dead letter的情况</h3><ul><li>消息或者队列的TTL过期</li><li>队列达到最大长度</li><li>消息被消费端拒绝（basic.reject or basic.nack）并且requeue=false</li></ul><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li><a href="https://cloud.tencent.com/developer/article/1877502">rabbitmq 怎么实现延迟消息队列？</a></li><li>RabbitMQ实战指南</li></ul>]]></content>
    
    
    <summary type="html">使用rabbitmq实现延时功能</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="rabbitmq" scheme="https://baymax55.github.io/tags/rabbitmq/"/>
    
    <category term="延迟队列" scheme="https://baymax55.github.io/tags/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"/>
    
    <category term="mq" scheme="https://baymax55.github.io/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>使用docker搭建dnsmasq</title>
    <link href="https://baymax55.github.io/2022/06/21/dns/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAdnsmasq/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAdnsmasq/"/>
    <id>https://baymax55.github.io/2022/06/21/dns/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAdnsmasq/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAdnsmasq/</id>
    <published>2022-06-21T09:16:03.261Z</published>
    <updated>2022-06-21T09:52:07.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关闭默认dns服务解决53端口被占用问题"><a href="#关闭默认dns服务解决53端口被占用问题" class="headerlink" title="关闭默认dns服务解决53端口被占用问题"></a>关闭默认dns服务解决53端口被占用问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop systemd-resolved<br>systemctl start systemd-resolved<br></code></pre></td></tr></table></figure><h3 id="docker启动命令"><a href="#docker启动命令" class="headerlink" title="docker启动命令"></a>docker启动命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name dnsmasq -d  --net=host \<br>--cap-add=NET_ADMIN  \<br>-v /home/baymax/dns/dnsmasq.conf:/etc/dnsmasq.conf \<br>-v /home/baymax/dns/resolv.conf:/etc/resolv.conf \<br> --log-opt &quot;max-size=100m&quot;   -e &quot;HTTP_USER=admin&quot;  -e &quot;HTTP_PASS=admin&quot; \<br>  --restart always jpillora/dnsmasq<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>本文未使用 –privileged,使用–cap-add和–cap-drop对功能进行细粒度控制</p><h3 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h3><p>修改/etc/resolv.conf目录下的nameserver为本机ip</p><h3 id="登录-http-localhost-8080-进行配置"><a href="#登录-http-localhost-8080-进行配置" class="headerlink" title="登录(http://localhost:8080)进行配置"></a>登录(<a href="http://localhost:8080)进行配置">http://localhost:8080)进行配置</a></h3><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>配置成功后直接在页面进行修改保存,启动即可</p><h4 id="配置文件demo"><a href="#配置文件demo" class="headerlink" title="配置文件demo"></a>配置文件demo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置上行DNS</span><br>resolv-file=/etc/resolv.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">resolv.conf DNS寻址从上到下</span><br>strict-order<br><span class="hljs-meta prompt_"># </span><span class="language-bash">DNS解析hosts时对应的hosts文件，对应no-hosts</span><br>addn-hosts=/etc/hosts<br>cache-size=1024 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">多个IP用逗号分隔，192.168.x.x表示本机的ip地址，只有127.0.0.1的时候表示只有本机可以访问。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过这个设置就可以实现同一局域网内的设备，通过把网络DNS设置为本机IP从而实现局域网范围内的DNS泛解析(注：无效IP有可能导至服务无法启动）</span><br>listen-address=127.0.0.1,192.168.168.4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重要！！这一行就是你想要泛解析的域名配置.</span><br>address=/baymax.bb/192.168.168.1<br>address=/blog.bb/192.168.168.1<br>address=/103.bb/192.168.168.2<br>address=/dns.bb/192.168.168.4<br>address=/gitlab.bb/192.168.168.4<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定使用哪个DNS服务器进行解析，对于不同的网站可以使用不同的域名对应解析。</span><br>server=/google.com/8.8.8.8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">国内指定DNS</span><br>server=/bb/192.168.168.4<br>server=/cn/114.114.114.114<br>server=/com/8.8.8.8<br></code></pre></td></tr></table></figure><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul><li>nslookup</li><li>dig</li><li>ping</li></ul><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li><a href="https://www.qikqiak.com/post/capabilities-on-k8s/">在 Kubernetes 中配置 Container Capabilities</a></li><li><a href="https://www.yisu.com/zixun/161163.html">Docker 1分钟搭建DNS服务器的方法</a></li></ul>]]></content>
    
    
    <summary type="html">主要记录搭建dns服务时遇到的一些问题</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="网络" scheme="https://baymax55.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="dns" scheme="https://baymax55.github.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之设计原则</title>
    <link href="https://baymax55.github.io/2022/06/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://baymax55.github.io/2022/06/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2022-06-07T02:34:46.000Z</published>
    <updated>2022-06-07T07:03:59.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>应该有且仅有一个原因引起类的变更</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>类的复杂性降低</li><li>可读性提高，复杂性降低</li><li>可维护性提高，可读性提高</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>第一种定义，也是最正宗的定义：If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.（如果对每一个类型为S的对象o1，都有类型为T的对 象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变 化，那么类型S是类型T的子类型。）</li><li>第二种定义：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.（所有引用基类的地方必须能透明地使用其子类的 对象。）</li></ul><p>第二个定义是最清晰明确的，通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但 是，反过来就不行了，有子类出现的地方，父类未必就能适应。</p><p>里氏替换原则为良好的继承定义了一个规范，一句简单的定义包含了4层含义。</p><ul><li>1.子类必须完全实现父类的方法</li><li>2.子类可以有自己的个性</li><li>3.覆盖或实现父类的方法时输入参数可以被放大</li><li>4.覆写或实现父类的方法时输出结果可以被缩小</li></ul><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>采用里氏替换原则的目的就是增强程序的健壮性，版本升级时也可以保持非常好的兼容性。即使增加子类，原有的子类还可以继续运行。在实际项目中，每个子类对应不同的业务 含义，使用父类作为参数，传递不同的子类完成不同的业务逻辑，非常完美！</p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>High level modules should not depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details.Details should depend upon abstractions.</p><p>翻译过来，包含三层含义:</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象</li><li>抽象不应该依赖细节</li><li>细节应该依赖抽象</li></ul><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。</p><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>设计是否具备稳定性，只要适当地“松松土”，观察“设计的蓝图”是否还可以茁壮地成长就可以得出结论，稳定性较高的设计，在周围环境频繁变化的时候，依然可以做到“我自岿然不动”。</p><h4 id="依赖的三种写法"><a href="#依赖的三种写法" class="headerlink" title="依赖的三种写法"></a>依赖的三种写法</h4><p>依赖是可以传递的，A对象依赖B对象，B又依赖C，C又依赖D……生生不息，依赖不止，记住一点：只要做到抽象依赖，即使是多层的依赖传递也无所畏惧！</p><p>对象的依赖关系有三种方式来传递</p><ul><li>1.构造函数传递依赖对象</li><li>2.Setter方法传递依赖对象</li><li>3.接口声明依赖对象</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>依赖倒置原则的本质就是通过抽象（接口或抽象类）使各个类或模块的实现彼此独立，不互相影响，实现模块间的松耦合，我们怎么在项目中使用这个规则呢？只要遵循以下的几个规则就可以:</p><ul><li>每个类尽量都有接口或抽象类，或者抽象类和接口两者都具备</li><li>变量的表面类型尽量是接口或者是抽象类</li><li>任何类都不应该从具体类派生</li><li>尽量不要覆写基类的方法</li><li>结合里氏替换原则使用</li></ul><p>依赖倒置原则是6个设计原则中最难以实现的原则，它是实现开闭原则的重要途径，依赖倒置原则没有实现，就别想实现对扩展开放，对修改关闭。在项目中，大家只要记住是“面向接口编程”就基本上抓住了依赖倒置原则的核心</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><ul><li>Clients should not be forced to depend upon interfaces that they don’t use.（客户端不应该依赖它不需要的接口。）</li><li>or The dependency of one class to another one should depend on the smallest possible interface. （类间的依赖关系应该建立在最小的接口上。）</li></ul><h4 id="接口隔离原则是对接口进行规范约束，其包含以下4层含义"><a href="#接口隔离原则是对接口进行规范约束，其包含以下4层含义" class="headerlink" title="接口隔离原则是对接口进行规范约束，其包含以下4层含义"></a>接口隔离原则是对接口进行规范约束，其包含以下4层含义</h4><ul><li>接口要尽量小</li><li>接口要高内聚<ul><li>什么是高内聚？高内聚就是提高接口、类、模块的处理能力，减少对外的交互。比如你告诉下属“到奥巴马的办公室偷一个×××文件”，然后听到下属用坚定的口吻回答你：“是，保证完成任务！”一个月后，你的下属还真的把×××文件放到你的办公桌上了，这种不讲任何条件、立刻完成任务的行为就是高内聚的表现。具体到接口隔离原则就是，要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本。</li></ul></li><li>定制服务</li><li>接口设计是有限度的</li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>接口隔离原则是对接口的定义，同时也是对类的定义，接口和类尽量使用原子接口或原子类来组装。但是，这个原子该怎么划分是设计模式中的一大难题，在实践中可以根据以下几个规则来衡量:</p><ul><li>一个接口只服务于一个子模块或业务逻辑</li><li>通过业务逻辑压缩接口中的public方法，接口时常去回顾，尽量让接口达到“满身筋骨肉”，而不是“肥嘟嘟”的一大堆方法</li><li>已经被污染了的接口，尽量去修改，若变更的风险较大，则采用适配器模式进行转化处理</li><li>了解环境，拒绝盲从。每个项目或产品都有特定的环境因素，别看到大师是这样做的你就照抄。千万别，环境不同，接口拆分的标准就不同。深入了解业务逻辑，最好的接口设计就出自你的手中！</li></ul><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least KnowledgePrinciple，LKP），虽然名字不同，但描述的是同一个规则：一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的这么多public方法，我就调用这么多，其他的我一概不关心<br>朋友类:<br>出现在成员变量、方法的输入输出参数中的类称为成员朋友类，而出现在方法体内部的类不属于朋友类</p><h4 id="迪米特法则对类的低耦合提出了明确的要求，其包含以下4层含义"><a href="#迪米特法则对类的低耦合提出了明确的要求，其包含以下4层含义" class="headerlink" title="迪米特法则对类的低耦合提出了明确的要求，其包含以下4层含义"></a>迪米特法则对类的低耦合提出了明确的要求，其包含以下4层含义</h4><ul><li>1.只和朋友交流</li><li>2.朋友间也是有距离的</li><li>3.是自己的就是自己的</li><li>4.谨慎使用Serializable</li></ul><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><h4 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h4><p>Software entities like classes,modules and functions should be open for extension but closed for modifications.（一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。）</p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>开闭原则是一个终极目标，任何人包括大师级人物都无法百分之百做到，但朝这个方向努力，可以非常显著地改善一个系统的架构，真正做到“拥抱变化”。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>设计模式之禅（第2版）</li><li><a href="https://java-design-patterns.com/patterns/">Java Design Patterns</a></li></ul>]]></content>
    
    
    <summary type="html">单一职责原则,里氏替换原则,依赖倒置原则,接口隔离原则,迪米特法则,开闭原则</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="设计模式" scheme="https://baymax55.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="设计原则" scheme="https://baymax55.github.io/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>win10终端设置代理</title>
    <link href="https://baymax55.github.io/2022/06/06/windows/win10%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>https://baymax55.github.io/2022/06/06/windows/win10%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</id>
    <published>2022-06-06T09:34:46.000Z</published>
    <updated>2022-06-06T09:58:12.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="走代理前"><a href="#走代理前" class="headerlink" title="走代理前"></a>走代理前</h3><p><img src="1.png"></p><h3 id="走代理后"><a href="#走代理后" class="headerlink" title="走代理后"></a>走代理后</h3><p><img src="2.png"></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><em>窗口一旦关闭,代理会失效,如需长期使用则考虑配置环境变量</em></p><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">http_proxy</span>=http://172.16.11.39:7890<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">https_proxy</span>=http://172.16.11.39:7890<br></code></pre></td></tr></table></figure><h4 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">Env:http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span>;<span class="hljs-variable">$Env</span>:https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span></span><br><br></code></pre></td></tr></table></figure><h4 id="git-bash"><a href="#git-bash" class="headerlink" title="git bash"></a>git bash</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export http_proxy=http://172.16.11.39:7890<br>export https_proxy=http://172.16.11.39:7890<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">介绍如何使终端走代理访问</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="代理" scheme="https://baymax55.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="windows" scheme="https://baymax55.github.io/tags/windows/"/>
    
    <category term="命令" scheme="https://baymax55.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>使用Oh My Posh插件美化PowerShell</title>
    <link href="https://baymax55.github.io/2022/06/04/%E4%BD%BF%E7%94%A8Oh%20My%20Posh%E6%8F%92%E4%BB%B6%E7%BE%8E%E5%8C%96PowerShell/"/>
    <id>https://baymax55.github.io/2022/06/04/%E4%BD%BF%E7%94%A8Oh%20My%20Posh%E6%8F%92%E4%BB%B6%E7%BE%8E%E5%8C%96PowerShell/</id>
    <published>2022-06-04T12:34:46.000Z</published>
    <updated>2022-06-06T06:25:56.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>PowerShell 输入以下命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">winget install oh-my-posh<br></code></pre></td></tr></table></figure><h4 id="设置自动启动初始化oh-my-posh"><a href="#设置自动启动初始化oh-my-posh" class="headerlink" title="设置自动启动初始化oh-my-posh"></a>设置自动启动初始化oh-my-posh</h4><p>安装完成后，为了使每次启动PowerShell后自动初始化oh-my-posh,继续在当前命令输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">notepad <span class="hljs-variable">$Profile</span><br></code></pre></td></tr></table></figure><p>添加以下内容至打开的记事本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">oh-my-posh init pwsh --config <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot;</span> | Invoke-Expression<br></code></pre></td></tr></table></figure><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>输入以下命令查看主题列表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Get-PoshThemes<br></code></pre></td></tr></table></figure><p>在PowerShell终端下使用 notepad $Profile 命令打开记事本,修改完主题名称后<br>继续在当前目录 执行 .$Profile 命令 使之生效<br><img src="2.png"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h4 id="ZLocation"><a href="#ZLocation" class="headerlink" title="ZLocation"></a>ZLocation</h4><p>使用ZLocation命令可以用关键字直接跳到想去的資料夾,比使用 cd 更快速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Install-Module ZLocation -Scope CurrentUser<br></code></pre></td></tr></table></figure><h4 id="PSReadLine"><a href="#PSReadLine" class="headerlink" title="PSReadLine"></a>PSReadLine</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Install-Module PSReadLine<br></code></pre></td></tr></table></figure><h4 id="TERMINAL-ICONS"><a href="#TERMINAL-ICONS" class="headerlink" title="TERMINAL-ICONS"></a>TERMINAL-ICONS</h4><p>使输出的目录或文件带颜色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Install-Module -Name Terminal-Icons -Repository PSGallery<br></code></pre></td></tr></table></figure><p>安装完以上插件后修改配置文件使之生效:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录<br><br>Import-Module -Name Terminal-Icons<br><br>Import-Module ZLocation<br></code></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-PowerShell显示图标会乱码"><a href="#1-PowerShell显示图标会乱码" class="headerlink" title="1.PowerShell显示图标会乱码"></a>1.PowerShell显示图标会乱码</h4><p>安裝Patched字体</p><ul><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a></li><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a></li><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Italic.ttf">MesloLGS NF Italic.ttf</a></li><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></li></ul><p>修改PowerShell的字体为刚安装的字体(MesloLGS NF),使字体生效<br><img src="1.png"></p><h4 id="2-出现以下信息显示模块安装的oh-my-posh不再支持"><a href="#2-出现以下信息显示模块安装的oh-my-posh不再支持" class="headerlink" title="2.出现以下信息显示模块安装的oh-my-posh不再支持"></a>2.出现以下信息显示模块安装的oh-my-posh不再支持</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">Hey friend<br>In an effort to grow oh-my-posh, the decision was made to no<br>longer support the PowerShell module. Over the past year, the<br>added benefit of the module disappeared, while the burden of<br>maintaining it increased.<br>However, this doesn&#x27;t mean oh-my-posh disappears from your<br>terminal, it just means that you&#x27;ll have to use a different<br>tool to install it.<br>All you need to do, is follow the migration guide here:<br>https://ohmyposh.dev/docs/migrating<br></code></pre></td></tr></table></figure><p>表示你过去是用 Install-Module 的方式安裝 Oh My Posh<br>根据迁移建议，彻底卸载，然后使用官方建议安装方式安装<br>卸载命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Uninstall-Module oh-my-posh -AllVersions<br></code></pre></td></tr></table></figure><h3 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h3><ul><li><a href="https://ohmyposh.dev/docs/installation/windows">Install Oh My Posh on Windows</a></li><li><a href="https://www.kwchang0831.dev/dev-env/pwsh/oh-my-posh">安裝新版 Oh My Posh 與插件來美化 PowerShell</a></li><li><a href="https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal">My Ultimate PowerShell prompt with Oh My Posh and the Windows Terminal</a></li></ul>]]></content>
    
    
    <summary type="html">Oh My Posh 是一個主題引擎,可以用来美化PowerShell 7(pwsh)</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="Posh" scheme="https://baymax55.github.io/tags/Posh/"/>
    
    <category term="PowerShell" scheme="https://baymax55.github.io/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>k8s重启pod方式</title>
    <link href="https://baymax55.github.io/2022/06/04/k8s/k8s%E9%87%8D%E5%90%AFpod%E6%96%B9%E5%BC%8F/"/>
    <id>https://baymax55.github.io/2022/06/04/k8s/k8s%E9%87%8D%E5%90%AFpod%E6%96%B9%E5%BC%8F/</id>
    <published>2022-06-04T04:17:46.000Z</published>
    <updated>2022-06-06T06:25:56.639Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Rolling-Restart-Method"><a href="#Rolling-Restart-Method" class="headerlink" title="Rolling Restart Method"></a>Rolling Restart Method</h3><p>Kubernetes now allows you to execute a rolling restart of your deployment as of version 1.15. This is the quickest restart mechanism in Kubernetes, as it is a new addition. The command given above shuts down and restarts each container in your deployment one by one. Because most of the containers are still functioning, your app will be accessible.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl rollout restart deployment nginx-deploy<br></code></pre></td></tr></table></figure><h3 id="Environment-Variable-Method"><a href="#Environment-Variable-Method" class="headerlink" title="Environment Variable Method"></a>Environment Variable Method</h3><p>Another option is to force pods to restart and sync with your changes by setting or changing an environment variable. You can, for instance, alter the date of container deployment:</p><p>In the scenario above, set env modifies the environment variables, deployment [deployment name] selects your deployment, and DEPLOY DATE=”$(date)” modifies the deployment date and causes the pod to resume.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl set env deployment nginx-deploy DEPLOY_DATE=&quot;$(date)&quot;<br></code></pre></td></tr></table></figure><h3 id="Scale-Command-to-Change-Replicas"><a href="#Scale-Command-to-Change-Replicas" class="headerlink" title="Scale Command to Change Replicas"></a>Scale Command to Change Replicas</h3><p>You can modify the number of clones of the defective pod by using the scale command. When you set this value to 0, the pod is effectively turned off:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl scale --replicas=0 deployment nginx-deploy<br></code></pre></td></tr></table></figure><p>To restart the pod, provide the following command with a number of replicas greater than zero:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl scale --replicas=N deployment nginx-deploy<br></code></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://linuxhint.com/kubectl-rollout-restart/">What is Kubectl Rollout Restart?</a></li><li><a href="https://vqiu.cn/kubectl-rollout-restart/">如何使用Kubectl 滚动重启应用</a></li></ul>]]></content>
    
    
    <summary type="html">Rolling Restart Method,Environment Variable Method,Scale Command to Change Replicas</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="k8s" scheme="https://baymax55.github.io/tags/k8s/"/>
    
    <category term="pod" scheme="https://baymax55.github.io/tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>BeanFactory</title>
    <link href="https://baymax55.github.io/2022/06/03/spring/BeanFactory/"/>
    <id>https://baymax55.github.io/2022/06/03/spring/BeanFactory/</id>
    <published>2022-06-03T07:53:46.000Z</published>
    <updated>2022-06-06T06:25:56.639Z</updated>
    
    <content type="html"><![CDATA[<p><img src="beanFactory.png"></p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>BeanFactory interface provides a simple, yet flexible configuration mechanism to manage objects of any nature via the Spring IoC container.</p><h3 id="The-BeanFactory-Interface"><a href="#The-BeanFactory-Interface" class="headerlink" title="The BeanFactory Interface"></a>The BeanFactory Interface</h3><p>It’s interesting to start by having a look at the <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java">interface definition</a> in org.springframework.beans.factory package and discuss some of its important APIs here.</p><h4 id="The-getBean-APIs"><a href="#The-getBean-APIs" class="headerlink" title="The getBean() APIs"></a>The getBean() APIs</h4><p>Various versions of <a href="https://docs.spring.io/spring-framework/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean()</a> method return an instance of the specified bean, which may be shared or independent across the application.</p><h4 id="The-containsBean-API"><a href="#The-containsBean-API" class="headerlink" title="The containsBean() API"></a>The containsBean() API</h4><p>This method confirms if this bean factory contains a bean with the given name. More specifically, it confirms if the <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean(java.lang.String)</a> able to obtain a bean instance with the given name.</p><h4 id="The-isSingleton-API"><a href="#The-isSingleton-API" class="headerlink" title="The isSingleton() API"></a>The isSingleton() API</h4><p>The isSingleton API can be used to query if this bean is a shared singleton. That is if <a href="https://docs.spring.io/spring-framework/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean(java.lang.String)</a> will always return the same instance.</p><h4 id="The-isPrototype-API"><a href="#The-isPrototype-API" class="headerlink" title="The isPrototype() API"></a>The isPrototype() API</h4><p>This API will confirm if <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean(java.lang.String)</a> returns independent instances – meaning a bean configured with the prototype scope, or not.</p><p>The important thing to note is this method returning false does not clearly indicate a singleton object. It indicates non-independent instances, which may correspond to other scopes as well.</p><p>We need to use the <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#isSingleton-java.lang.String-">isSingleton(java.lang.String)</a> operation to explicitly check for a shared singleton instance.</p><h4 id="Other-APIs"><a href="#Other-APIs" class="headerlink" title="Other APIs"></a>Other APIs</h4><p>While the isTypeMatch(String name, Class targetType) method checks whether the bean with the given name matches the specified type, getType(String name) is useful in identifying the type of the bean with the given name.</p><p>Finally, getAliases(String name) return the aliases for the given bean name, if any.</p><h3 id="BeanFactory-API"><a href="#BeanFactory-API" class="headerlink" title="BeanFactory API"></a>BeanFactory API</h3><p>BeanFactory holds bean definitions and instantiates them whenever asked for by the client application – which means:</p><ul><li>It takes care of the lifecycle of a bean by instantiating it and calling appropriate destruction methods</li><li>It is capable of creating associations between dependent object while instantiating them</li><li>It is important to point that BeanFactory does not support the Annotation-based dependency Injection whereas ApplicationContext, a superset of BeanFactory does</li></ul><p>Do have a read on <a href="https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s08.html">Application Context</a> to find out what it can do extra.</p><h3 id="Defining-the-Bean"><a href="#Defining-the-Bean" class="headerlink" title="Defining the Bean"></a>Defining the Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// standard constructors, getters and setters</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Configuring-the-BeanFactory-with-XML"><a href="#Configuring-the-BeanFactory-with-XML" class="headerlink" title="Configuring the BeanFactory with XML"></a>Configuring the BeanFactory with XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.baeldung.beanfactory.Employee&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello! My name is Java&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;empalias&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="BeanFactory-with-ClassPathResource"><a href="#BeanFactory-with-ClassPathResource" class="headerlink" title="BeanFactory with ClassPathResource"></a>BeanFactory with ClassPathResource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactoryWithClassPathResourceTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createBeanFactoryAndCheckEmployeeBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;beanfactory-example.xml&quot;</span>);<br>        <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(res);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> (Employee) factory.getBean(<span class="hljs-string">&quot;employee&quot;</span>);<br><br>        assertTrue(factory.isSingleton(<span class="hljs-string">&quot;employee&quot;</span>));<br>        assertTrue(factory.getBean(<span class="hljs-string">&quot;employee&quot;</span>) <span class="hljs-keyword">instanceof</span> Employee);<br>        assertTrue(factory.isTypeMatch(<span class="hljs-string">&quot;employee&quot;</span>, Employee.class));<br>        assertTrue(factory.getAliases(<span class="hljs-string">&quot;employee&quot;</span>).length &gt; <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://www.baeldung.com/spring-beanfactory">Guide to the Spring BeanFactory</a></li></ul>]]></content>
    
    
    <summary type="html">BeanFactory interface provides a simple, yet flexible configuration mechanism to manage objects of any nature via the Spring IoC container.</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="spring" scheme="https://baymax55.github.io/tags/spring/"/>
    
    <category term="BeanFactory" scheme="https://baymax55.github.io/tags/BeanFactory/"/>
    
  </entry>
  
  <entry>
    <title>git高阶用法</title>
    <link href="https://baymax55.github.io/2022/06/02/git/git%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95/"/>
    <id>https://baymax55.github.io/2022/06/02/git/git%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95/</id>
    <published>2022-06-02T08:11:46.000Z</published>
    <updated>2022-06-06T06:25:56.626Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg"></p><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能:"></a>常用功能:</h4><ul><li>从上游分支获取最新commit信息，并有机的将当前分支和上游分支进行合并</li><li>对当前分支的历史commit进行修改，合并，删除等操作</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>你的分支和master冲突<ul><li>如果你git merge master就会留下一个merge的commit。在这种情况下，我们推荐使用git rebase master，就能不留commit将当前分支和master有机的合并。</li></ul></li><li>之前某次提交，改错了一个变量<ul><li>如果你修改那个变量然后再提交一个commit，这显然不是最优的。如果能将某次的提交挑出来修改就好了。</li><li>当然git提供了这个功能，你可以使用git rebase -i [git-hash| head~n],其中git-hash是你要开始进行rebase的commit的hash，而head~n则是从HEAD向前推n个commit.</li></ul></li></ul><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><p>暂存当前没有提交的更改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">保存当前更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">保存当前更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">pop</span> <span class="hljs-string">推出之前stash的内容更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">apply</span> <span class="hljs-string">推出之前stash的内容更改</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">--keep-index</span> <span class="hljs-string">只stash没有被add的内容</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">--include-untracked</span> <span class="hljs-string">stash还未加入git记录的文件</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">list</span> <span class="hljs-string">--stat</span> <span class="hljs-string">显示stash堆栈</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">show</span> <span class="hljs-string">stash@&#123;0&#125;</span> <span class="hljs-string">显示第x次的更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">show</span> <span class="hljs-string">显示最近一次stash的更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">show</span> <span class="hljs-string">--patch</span> <span class="hljs-string">显示最近一次stash的详细更改</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">&quot;stash msg&quot;</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">branch</span> <span class="hljs-string">new_brach</span> <span class="hljs-string">stash@&#123;0&#125;</span><br></code></pre></td></tr></table></figure><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>当做了更改之后没有编辑完，这个时候发现线上有个bug，你需要停下当前分支去修bug，这个时候你可以提一个commit到当前分支，或则使用git stash</p><h3 id="filter-branch"><a href="#filter-branch" class="headerlink" title="filter-branch"></a>filter-branch</h3><h4 id="主要功能-1"><a href="#主要功能-1" class="headerlink" title="主要功能"></a>主要功能</h4><p>过滤所有提交记录，进行相应的操作</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--tree-filter</span> <span class="hljs-string">&#x27;rm -rf .vscode&#x27;</span> <span class="hljs-string">删除所有分支的.vscode文件夹</span><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--tree-filter</span> <span class="hljs-string">&#x27;rm -f xxx&#x27;</span> <span class="hljs-string">xxx不存在，不报错</span><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--tree-filter</span> <span class="hljs-string">&#x27;rm -rf .vscoe&#x27;</span> <span class="hljs-string">--</span> <span class="hljs-string">--all(所有分支所有提交)</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--index-filter</span> <span class="hljs-string">&#x27;git rm --cached --ignore-unmatch password.txt&#x27;</span> <span class="hljs-string">(只检查password.txt</span> <span class="hljs-string">一个文件)</span><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">-f</span> <span class="hljs-string">--prune-empty</span> <span class="hljs-string">--</span> <span class="hljs-string">--all</span><br></code></pre></td></tr></table></figure><h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4><p>当发现你错误的将一个不应该提交的文件提交，然后已经过了很久，已经累计了无数次提交。<br>这个时候就可以使用git filter-branch将所有提交全部过滤一遍删除掉那个不应该提交的文件</p><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><h4 id="主要功能-2"><a href="#主要功能-2" class="headerlink" title="主要功能"></a>主要功能</h4><p>从任何分支，抽取提交到当前分支</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">git-hash</span> <br><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">--edit</span> <span class="hljs-string">git-hash</span><br><br><span class="hljs-string">pick</span> <span class="hljs-string">多个</span><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">--no-commit</span> <span class="hljs-string">git-hash</span> <span class="hljs-string">git-hash</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">-x</span> <span class="hljs-string">git-hash</span> <span class="hljs-string">(添加cherry</span> <span class="hljs-string">pick</span> <span class="hljs-string">from</span> <span class="hljs-string">那个branch)</span><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">--signoff</span> <span class="hljs-string">git-hash不修改author</span><br></code></pre></td></tr></table></figure><h4 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h4><p>当需要将多个分支上的提交合在一个分支合并到master的时候，显然如果这3个分支有关联，一次合并更为合理。<br>这个时候就可以使用git cherry-pick进行精细化的commit的操作。</p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><p>☐ submodule<br>☐ reflog </p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://hiluluke.cn/2017/07/23/git-senior/">git 高阶用法</a></li></ul>]]></content>
    
    
    <summary type="html">git rebase,git stash,git filter-branch,git cherry-pick</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="git" scheme="https://baymax55.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>docker网络模式</title>
    <link href="https://baymax55.github.io/2022/06/02/docker/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>https://baymax55.github.io/2022/06/02/docker/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-02T06:20:46.000Z</published>
    <updated>2022-06-06T06:25:56.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h3><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。<br>虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。<br>从docker0子网中分配一个 IP 给容器使用，并设置 docker0 的 IP 地址为容器的默认网关。<br>在主机上创建一对虚拟网卡veth pair设备，Docker 将 veth pair 设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。<br>bridge模式是 docker 的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker 实际是在iptables做了DNAT规则，实现端口转发功能。</p><p>bridge模式如下图所示：<br><img src="1.png"></p><h3 id="Host-模式"><a href="#Host-模式" class="headerlink" title="Host 模式"></a>Host 模式</h3><p>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个 Network Namespace。<br>容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><p>Host模式如下图所示：<br><img src="2.png"></p><h3 id="Container-模式"><a href="#Container-模式" class="headerlink" title="Container 模式"></a>Container 模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><p>Container模式示意图：<br><img src="3.png"></p><h3 id="None模式"><a href="#None模式" class="headerlink" title="None模式"></a>None模式</h3><p>使用none模式，Docker 容器拥有自己的 Network Namespace，但是，并不为Docker 容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p><p>None模式示意图:<br><img src="4.png"></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.qikqiak.com/k8s-book/docs/7.Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F.html">Docker 的网络模式</a></li></ul>]]></content>
    
    
    <summary type="html">Bridge模式,Host 模式,Container 模式,None模式</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="docker网络" scheme="https://baymax55.github.io/tags/docker%E7%BD%91%E7%BB%9C/"/>
    
    <category term="docker" scheme="https://baymax55.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://baymax55.github.io/2022/06/02/hello-world/"/>
    <id>https://baymax55.github.io/2022/06/02/hello-world/</id>
    <published>2022-06-02T03:35:20.518Z</published>
    <updated>2022-06-02T03:57:39.112Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Create a new post,Run server,Generate static files,Deploy to remote sites</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql索引</title>
    <link href="https://baymax55.github.io/2022/06/01/mysql/mysql%E7%B4%A2%E5%BC%95/"/>
    <id>https://baymax55.github.io/2022/06/01/mysql/mysql%E7%B4%A2%E5%BC%95/</id>
    <published>2022-06-01T13:15:46.000Z</published>
    <updated>2022-06-02T06:43:08.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h3><p>通过使用索引(非主键索引)查询到数据后,仍需通过主键id在主键索引上查询数据的过程,称为回表</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>通过使用索引(非主键索引)查询到数据后,不需通过主键id在主键索引上查询数据,索引已经“覆盖了”我们的查询需求,我们称为覆盖索引<br><strong>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段</strong></p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>按照最左匹配原则进行判断是否使用索引<br>创建索引（name）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">select * from user where name like &#x27;张%&#x27;; # 使用索引<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">select * from user where name like &#x27;%张&#x27;; # 未使用索引<br></code></pre></td></tr></table></figure><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>创建联合索引（name, age）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">select * from user where name like &#x27;张%&#x27; and age=10 and isMale=1;<br></code></pre></td></tr></table></figure><p>在 MySQL 5.6 之前，待找到第一个符合张前缀的用户后开始一个个回表。到主键索引上找出数据行，再对比字段值<br><img src="1.jpg"><br>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数<br><img src="2.jpg"></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>MySQL实战45讲</li></ul>]]></content>
    
    
    <summary type="html">回表,覆盖索引,最左前缀原则,索引下推</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="mysql" scheme="https://baymax55.github.io/tags/mysql/"/>
    
    <category term="索引" scheme="https://baymax55.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Mockito 指南</title>
    <link href="https://baymax55.github.io/2022/05/31/Mockito-%E6%8C%87%E5%8D%97/"/>
    <id>https://baymax55.github.io/2022/05/31/Mockito-%E6%8C%87%E5%8D%97/</id>
    <published>2022-05-31T13:53:46.000Z</published>
    <updated>2022-06-02T06:43:25.166Z</updated>
    
    <content type="html"><![CDATA[<p>Mockito 是一个模拟测试框架，主要功能是在单元测试中模拟类/对象的行为。</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://www.letianbiji.com/java-mockito/">Mockito 指南</a></li></ul>]]></content>
    
    
    <summary type="html">Mockito 是一个模拟测试框架，主要功能是在单元测试中模拟类/对象的行为</summary>
    
    
    
    <category term="IT" scheme="https://baymax55.github.io/categories/IT/"/>
    
    
    <category term="mockito" scheme="https://baymax55.github.io/tags/mockito/"/>
    
    <category term="java" scheme="https://baymax55.github.io/tags/java/"/>
    
  </entry>
  
</feed>
