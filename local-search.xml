<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>win10终端设置代理</title>
    <link href="/2022/06/06/windows/win10%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2022/06/06/windows/win10%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="走代理前"><a href="#走代理前" class="headerlink" title="走代理前"></a>走代理前</h3><p><img src="1.png"></p><h3 id="走代理后"><a href="#走代理后" class="headerlink" title="走代理后"></a>走代理后</h3><p><img src="2.png"></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><em>窗口一旦关闭,代理会失效,如需长期使用则考虑配置环境变量</em></p><h4 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">http_proxy</span>=http://172.16.11.39:7890<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">https_proxy</span>=http://172.16.11.39:7890<br></code></pre></td></tr></table></figure><h4 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">Env:http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span>;<span class="hljs-variable">$Env</span>:https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span></span><br><br></code></pre></td></tr></table></figure><h4 id="git-bash"><a href="#git-bash" class="headerlink" title="git bash"></a>git bash</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export http_proxy=http://172.16.11.39:7890<br>export https_proxy=http://172.16.11.39:7890<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>代理</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Oh My Posh插件美化PowerShell</title>
    <link href="/2022/06/04/%E4%BD%BF%E7%94%A8Oh%20My%20Posh%E6%8F%92%E4%BB%B6%E7%BE%8E%E5%8C%96PowerShell/"/>
    <url>/2022/06/04/%E4%BD%BF%E7%94%A8Oh%20My%20Posh%E6%8F%92%E4%BB%B6%E7%BE%8E%E5%8C%96PowerShell/</url>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>PowerShell 输入以下命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">winget install oh-my-posh<br></code></pre></td></tr></table></figure><h4 id="设置自动启动初始化oh-my-posh"><a href="#设置自动启动初始化oh-my-posh" class="headerlink" title="设置自动启动初始化oh-my-posh"></a>设置自动启动初始化oh-my-posh</h4><p>安装完成后，为了使每次启动PowerShell后自动初始化oh-my-posh,继续在当前命令输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">notepad <span class="hljs-variable">$Profile</span><br></code></pre></td></tr></table></figure><p>添加以下内容至打开的记事本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">oh-my-posh init pwsh --config <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot;</span> | Invoke-Expression<br></code></pre></td></tr></table></figure><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>输入以下命令查看主题列表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Get-PoshThemes<br></code></pre></td></tr></table></figure><p>在PowerShell终端下使用 notepad $Profile 命令打开记事本,修改完主题名称后<br>继续在当前目录 执行 .$Profile 命令 使之生效<br><img src="2.png"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h4 id="ZLocation"><a href="#ZLocation" class="headerlink" title="ZLocation"></a>ZLocation</h4><p>使用ZLocation命令可以用关键字直接跳到想去的資料夾,比使用 cd 更快速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Install-Module ZLocation -Scope CurrentUser<br></code></pre></td></tr></table></figure><h4 id="PSReadLine"><a href="#PSReadLine" class="headerlink" title="PSReadLine"></a>PSReadLine</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Install-Module PSReadLine<br></code></pre></td></tr></table></figure><h4 id="TERMINAL-ICONS"><a href="#TERMINAL-ICONS" class="headerlink" title="TERMINAL-ICONS"></a>TERMINAL-ICONS</h4><p>使输出的目录或文件带颜色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Install-Module -Name Terminal-Icons -Repository PSGallery<br></code></pre></td></tr></table></figure><p>安装完以上插件后修改配置文件使之生效:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录<br><br>Import-Module -Name Terminal-Icons<br><br>Import-Module ZLocation<br></code></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-PowerShell显示图标会乱码"><a href="#1-PowerShell显示图标会乱码" class="headerlink" title="1.PowerShell显示图标会乱码"></a>1.PowerShell显示图标会乱码</h4><p>安裝Patched字体</p><ul><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a></li><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a></li><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Italic.ttf">MesloLGS NF Italic.ttf</a></li><li><a href="https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></li></ul><p>修改PowerShell的字体为刚安装的字体(MesloLGS NF),使字体生效<br><img src="1.png"></p><h4 id="2-出现以下信息显示模块安装的oh-my-posh不再支持"><a href="#2-出现以下信息显示模块安装的oh-my-posh不再支持" class="headerlink" title="2.出现以下信息显示模块安装的oh-my-posh不再支持"></a>2.出现以下信息显示模块安装的oh-my-posh不再支持</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">Hey friend<br>In an effort to grow oh-my-posh, the decision was made to no<br>longer support the PowerShell module. Over the past year, the<br>added benefit of the module disappeared, while the burden of<br>maintaining it increased.<br>However, this doesn&#x27;t mean oh-my-posh disappears from your<br>terminal, it just means that you&#x27;ll have to use a different<br>tool to install it.<br>All you need to do, is follow the migration guide here:<br>https://ohmyposh.dev/docs/migrating<br></code></pre></td></tr></table></figure><p>表示你过去是用 Install-Module 的方式安裝 Oh My Posh<br>根据迁移建议，彻底卸载，然后使用官方建议安装方式安装<br>卸载命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Uninstall-Module oh-my-posh -AllVersions<br></code></pre></td></tr></table></figure><h3 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h3><ul><li><a href="https://ohmyposh.dev/docs/installation/windows">Install Oh My Posh on Windows</a></li><li><a href="https://www.kwchang0831.dev/dev-env/pwsh/oh-my-posh">安裝新版 Oh My Posh 與插件來美化 PowerShell</a></li><li><a href="https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal">My Ultimate PowerShell prompt with Oh My Posh and the Windows Terminal</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Posh</tag>
      
      <tag>PowerShell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s重启pod方式</title>
    <link href="/2022/06/04/k8s/k8s%E9%87%8D%E5%90%AFpod%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/06/04/k8s/k8s%E9%87%8D%E5%90%AFpod%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="Rolling-Restart-Method"><a href="#Rolling-Restart-Method" class="headerlink" title="Rolling Restart Method"></a>Rolling Restart Method</h3><p>Kubernetes now allows you to execute a rolling restart of your deployment as of version 1.15. This is the quickest restart mechanism in Kubernetes, as it is a new addition. The command given above shuts down and restarts each container in your deployment one by one. Because most of the containers are still functioning, your app will be accessible.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl rollout restart deployment nginx-deploy<br></code></pre></td></tr></table></figure><h3 id="Environment-Variable-Method"><a href="#Environment-Variable-Method" class="headerlink" title="Environment Variable Method"></a>Environment Variable Method</h3><p>Another option is to force pods to restart and sync with your changes by setting or changing an environment variable. You can, for instance, alter the date of container deployment:</p><p>In the scenario above, set env modifies the environment variables, deployment [deployment name] selects your deployment, and DEPLOY DATE=”$(date)” modifies the deployment date and causes the pod to resume.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl set env deployment nginx-deploy DEPLOY_DATE=&quot;$(date)&quot;<br></code></pre></td></tr></table></figure><h3 id="Scale-Command-to-Change-Replicas"><a href="#Scale-Command-to-Change-Replicas" class="headerlink" title="Scale Command to Change Replicas"></a>Scale Command to Change Replicas</h3><p>You can modify the number of clones of the defective pod by using the scale command. When you set this value to 0, the pod is effectively turned off:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl scale --replicas=0 deployment nginx-deploy<br></code></pre></td></tr></table></figure><p>To restart the pod, provide the following command with a number of replicas greater than zero:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl scale --replicas=N deployment nginx-deploy<br></code></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://linuxhint.com/kubectl-rollout-restart/">What is Kubectl Rollout Restart?</a></li><li><a href="https://vqiu.cn/kubectl-rollout-restart/">如何使用Kubectl 滚动重启应用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>pod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BeanFactory</title>
    <link href="/2022/06/03/spring/BeanFactory/"/>
    <url>/2022/06/03/spring/BeanFactory/</url>
    
    <content type="html"><![CDATA[<p><img src="beanFactory.png"></p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>BeanFactory interface provides a simple, yet flexible configuration mechanism to manage objects of any nature via the Spring IoC container.</p><h3 id="The-BeanFactory-Interface"><a href="#The-BeanFactory-Interface" class="headerlink" title="The BeanFactory Interface"></a>The BeanFactory Interface</h3><p>It’s interesting to start by having a look at the <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java">interface definition</a> in org.springframework.beans.factory package and discuss some of its important APIs here.</p><h4 id="The-getBean-APIs"><a href="#The-getBean-APIs" class="headerlink" title="The getBean() APIs"></a>The getBean() APIs</h4><p>Various versions of <a href="https://docs.spring.io/spring-framework/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean()</a> method return an instance of the specified bean, which may be shared or independent across the application.</p><h4 id="The-containsBean-API"><a href="#The-containsBean-API" class="headerlink" title="The containsBean() API"></a>The containsBean() API</h4><p>This method confirms if this bean factory contains a bean with the given name. More specifically, it confirms if the <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean(java.lang.String)</a> able to obtain a bean instance with the given name.</p><h4 id="The-isSingleton-API"><a href="#The-isSingleton-API" class="headerlink" title="The isSingleton() API"></a>The isSingleton() API</h4><p>The isSingleton API can be used to query if this bean is a shared singleton. That is if <a href="https://docs.spring.io/spring-framework/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean(java.lang.String)</a> will always return the same instance.</p><h4 id="The-isPrototype-API"><a href="#The-isPrototype-API" class="headerlink" title="The isPrototype() API"></a>The isPrototype() API</h4><p>This API will confirm if <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-">getBean(java.lang.String)</a> returns independent instances – meaning a bean configured with the prototype scope, or not.</p><p>The important thing to note is this method returning false does not clearly indicate a singleton object. It indicates non-independent instances, which may correspond to other scopes as well.</p><p>We need to use the <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/beans/factory/BeanFactory.html#isSingleton-java.lang.String-">isSingleton(java.lang.String)</a> operation to explicitly check for a shared singleton instance.</p><h4 id="Other-APIs"><a href="#Other-APIs" class="headerlink" title="Other APIs"></a>Other APIs</h4><p>While the isTypeMatch(String name, Class targetType) method checks whether the bean with the given name matches the specified type, getType(String name) is useful in identifying the type of the bean with the given name.</p><p>Finally, getAliases(String name) return the aliases for the given bean name, if any.</p><h3 id="BeanFactory-API"><a href="#BeanFactory-API" class="headerlink" title="BeanFactory API"></a>BeanFactory API</h3><p>BeanFactory holds bean definitions and instantiates them whenever asked for by the client application – which means:</p><ul><li>It takes care of the lifecycle of a bean by instantiating it and calling appropriate destruction methods</li><li>It is capable of creating associations between dependent object while instantiating them</li><li>It is important to point that BeanFactory does not support the Annotation-based dependency Injection whereas ApplicationContext, a superset of BeanFactory does</li></ul><p>Do have a read on <a href="https://docs.spring.io/spring-framework/docs/3.0.0.M3/reference/html/ch04s08.html">Application Context</a> to find out what it can do extra.</p><h3 id="Defining-the-Bean"><a href="#Defining-the-Bean" class="headerlink" title="Defining the Bean"></a>Defining the Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// standard constructors, getters and setters</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Configuring-the-BeanFactory-with-XML"><a href="#Configuring-the-BeanFactory-with-XML" class="headerlink" title="Configuring the BeanFactory with XML"></a>Configuring the BeanFactory with XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.baeldung.beanfactory.Employee&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello! My name is Java&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;empalias&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="BeanFactory-with-ClassPathResource"><a href="#BeanFactory-with-ClassPathResource" class="headerlink" title="BeanFactory with ClassPathResource"></a>BeanFactory with ClassPathResource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactoryWithClassPathResourceTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createBeanFactoryAndCheckEmployeeBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;beanfactory-example.xml&quot;</span>);<br>        <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(res);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> (Employee) factory.getBean(<span class="hljs-string">&quot;employee&quot;</span>);<br><br>        assertTrue(factory.isSingleton(<span class="hljs-string">&quot;employee&quot;</span>));<br>        assertTrue(factory.getBean(<span class="hljs-string">&quot;employee&quot;</span>) <span class="hljs-keyword">instanceof</span> Employee);<br>        assertTrue(factory.isTypeMatch(<span class="hljs-string">&quot;employee&quot;</span>, Employee.class));<br>        assertTrue(factory.getAliases(<span class="hljs-string">&quot;employee&quot;</span>).length &gt; <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="https://www.baeldung.com/spring-beanfactory">Guide to the Spring BeanFactory</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>BeanFactory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git高阶用法</title>
    <link href="/2022/06/02/git/git%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95/"/>
    <url>/2022/06/02/git/git%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="1.jpg"></p><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能:"></a>常用功能:</h4><ul><li>从上游分支获取最新commit信息，并有机的将当前分支和上游分支进行合并</li><li>对当前分支的历史commit进行修改，合并，删除等操作</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>你的分支和master冲突<ul><li>如果你git merge master就会留下一个merge的commit。在这种情况下，我们推荐使用git rebase master，就能不留commit将当前分支和master有机的合并。</li></ul></li><li>之前某次提交，改错了一个变量<ul><li>如果你修改那个变量然后再提交一个commit，这显然不是最优的。如果能将某次的提交挑出来修改就好了。</li><li>当然git提供了这个功能，你可以使用git rebase -i [git-hash| head~n],其中git-hash是你要开始进行rebase的commit的hash，而head~n则是从HEAD向前推n个commit.</li></ul></li></ul><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><p>暂存当前没有提交的更改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">保存当前更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">保存当前更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">pop</span> <span class="hljs-string">推出之前stash的内容更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">apply</span> <span class="hljs-string">推出之前stash的内容更改</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">--keep-index</span> <span class="hljs-string">只stash没有被add的内容</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">--include-untracked</span> <span class="hljs-string">stash还未加入git记录的文件</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">list</span> <span class="hljs-string">--stat</span> <span class="hljs-string">显示stash堆栈</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">show</span> <span class="hljs-string">stash@&#123;0&#125;</span> <span class="hljs-string">显示第x次的更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">show</span> <span class="hljs-string">显示最近一次stash的更改</span><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">show</span> <span class="hljs-string">--patch</span> <span class="hljs-string">显示最近一次stash的详细更改</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">save</span> <span class="hljs-string">&quot;stash msg&quot;</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">stash</span> <span class="hljs-string">branch</span> <span class="hljs-string">new_brach</span> <span class="hljs-string">stash@&#123;0&#125;</span><br></code></pre></td></tr></table></figure><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>当做了更改之后没有编辑完，这个时候发现线上有个bug，你需要停下当前分支去修bug，这个时候你可以提一个commit到当前分支，或则使用git stash</p><h3 id="filter-branch"><a href="#filter-branch" class="headerlink" title="filter-branch"></a>filter-branch</h3><h4 id="主要功能-1"><a href="#主要功能-1" class="headerlink" title="主要功能"></a>主要功能</h4><p>过滤所有提交记录，进行相应的操作</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--tree-filter</span> <span class="hljs-string">&#x27;rm -rf .vscode&#x27;</span> <span class="hljs-string">删除所有分支的.vscode文件夹</span><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--tree-filter</span> <span class="hljs-string">&#x27;rm -f xxx&#x27;</span> <span class="hljs-string">xxx不存在，不报错</span><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--tree-filter</span> <span class="hljs-string">&#x27;rm -rf .vscoe&#x27;</span> <span class="hljs-string">--</span> <span class="hljs-string">--all(所有分支所有提交)</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">--index-filter</span> <span class="hljs-string">&#x27;git rm --cached --ignore-unmatch password.txt&#x27;</span> <span class="hljs-string">(只检查password.txt</span> <span class="hljs-string">一个文件)</span><br><span class="hljs-string">git</span> <span class="hljs-string">filter-branch</span> <span class="hljs-string">-f</span> <span class="hljs-string">--prune-empty</span> <span class="hljs-string">--</span> <span class="hljs-string">--all</span><br></code></pre></td></tr></table></figure><h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4><p>当发现你错误的将一个不应该提交的文件提交，然后已经过了很久，已经累计了无数次提交。<br>这个时候就可以使用git filter-branch将所有提交全部过滤一遍删除掉那个不应该提交的文件</p><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><h4 id="主要功能-2"><a href="#主要功能-2" class="headerlink" title="主要功能"></a>主要功能</h4><p>从任何分支，抽取提交到当前分支</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">git-hash</span> <br><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">--edit</span> <span class="hljs-string">git-hash</span><br><br><span class="hljs-string">pick</span> <span class="hljs-string">多个</span><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">--no-commit</span> <span class="hljs-string">git-hash</span> <span class="hljs-string">git-hash</span><br><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">-x</span> <span class="hljs-string">git-hash</span> <span class="hljs-string">(添加cherry</span> <span class="hljs-string">pick</span> <span class="hljs-string">from</span> <span class="hljs-string">那个branch)</span><br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">--signoff</span> <span class="hljs-string">git-hash不修改author</span><br></code></pre></td></tr></table></figure><h4 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h4><p>当需要将多个分支上的提交合在一个分支合并到master的时候，显然如果这3个分支有关联，一次合并更为合理。<br>这个时候就可以使用git cherry-pick进行精细化的commit的操作。</p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><p>☐ submodule<br>☐ reflog </p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://hiluluke.cn/2017/07/23/git-senior/">git 高阶用法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker网络模式</title>
    <link href="/2022/06/02/docker/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/02/docker/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h3><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。<br>虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。<br>从docker0子网中分配一个 IP 给容器使用，并设置 docker0 的 IP 地址为容器的默认网关。<br>在主机上创建一对虚拟网卡veth pair设备，Docker 将 veth pair 设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。<br>bridge模式是 docker 的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker 实际是在iptables做了DNAT规则，实现端口转发功能。</p><p>bridge模式如下图所示：<br><img src="1.png"></p><h3 id="Host-模式"><a href="#Host-模式" class="headerlink" title="Host 模式"></a>Host 模式</h3><p>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个 Network Namespace。<br>容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><p>Host模式如下图所示：<br><img src="2.png"></p><h3 id="Container-模式"><a href="#Container-模式" class="headerlink" title="Container 模式"></a>Container 模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><p>Container模式示意图：<br><img src="3.png"></p><h3 id="None模式"><a href="#None模式" class="headerlink" title="None模式"></a>None模式</h3><p>使用none模式，Docker 容器拥有自己的 Network Namespace，但是，并不为Docker 容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p><p>None模式示意图:<br><img src="4.png"></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.qikqiak.com/k8s-book/docs/7.Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F.html">Docker 的网络模式</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker网络</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/02/hello-world/"/>
    <url>/2022/06/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql索引</title>
    <link href="/2022/06/01/mysql/mysql%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/06/01/mysql/mysql%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h3 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h3><p>通过使用索引(非主键索引)查询到数据后,仍需通过主键id在主键索引上查询数据的过程,称为回表</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>通过使用索引(非主键索引)查询到数据后,不需通过主键id在主键索引上查询数据,索引已经“覆盖了”我们的查询需求,我们称为覆盖索引<br><strong>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段</strong></p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>按照最左匹配原则进行判断是否使用索引<br>创建索引（name）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">select * from user where name like &#x27;张%&#x27;; # 使用索引<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">select * from user where name like &#x27;%张&#x27;; # 未使用索引<br></code></pre></td></tr></table></figure><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>创建联合索引（name, age）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">select * from user where name like &#x27;张%&#x27; and age=10 and isMale=1;<br></code></pre></td></tr></table></figure><p>在 MySQL 5.6 之前，待找到第一个符合张前缀的用户后开始一个个回表。到主键索引上找出数据行，再对比字段值<br><img src="1.jpg"><br>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数<br><img src="2.jpg"></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>MySQL实战45讲</li></ul>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mockito 指南</title>
    <link href="/2022/05/31/Mockito-%E6%8C%87%E5%8D%97/"/>
    <url>/2022/05/31/Mockito-%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>Mockito 是一个模拟测试框架，主要功能是在单元测试中模拟类/对象的行为。</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://www.letianbiji.com/java-mockito/">Mockito 指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mockito</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
